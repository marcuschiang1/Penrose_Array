#!/usr/bin/env node

var program = require('commander'),
    roger = require('../lib/roger'),
    Project = roger.Project,
    util = roger.util,
    mkdirp = require('mkdirp'),
    path = process.cwd();

require('colors');

function processCommand(command, options) {
  return Project.get(path)
          .done(function(project) {
            if (command === 'get') {
              util.log('Project at ' + path.underline + ' is now up to date.');
              process.exit(0);
            }
            else if (command === 'show') {
              util.log('\n\nProject dependencies for ' + project.fullName.bold);

              if (project.dependencies.length > 0) {
                util.log(project.dependencies.valueOf());
                util.log('\n\n');
              }

              process.exit(0);
            }

            // build
            var buildPath = options.outputPath.split('/');
            buildPath.pop();
            buildPath = buildPath.join('/');

            mkdirp(buildPath, function(err) {
              if (err) {
                util.log('Could not create build dir at ' + buildPath);
                process.exit(1);
              }

              project.build().then(function(dependencies) {
                dependencies.writeToFile(options.outputPath)
                            .done(function() {
                              util.log(('\nProject build output was written to ' +
                                              options.outputPath.underline + '\n').bold);
                              process.exit(0);
                            });
              });
            });
          });
}

program
  .version(require('../package.json').version)
  .option('-v, --verbose', 'output copious amounts of useful debug output when running');


program
  .command('clean')
  .description('clean the project in the current working directory')
  .action(function(){
    Project.clean(path)
            .then(function() {
              util.log('Cleaned project at ' + path.underline);
              process.exit(0);
            });
  });

program
  .command('get')
  .description('install or update any dependencies of the project in the current working directory')
  .action(function(options){
    processCommand('get', options);
  });

program
  .command('show')
  .alias('ls')
  .description('show the dependencies of the project in the current working directory')
  .action(function(options){
    processCommand('show', options);
  });

program
  .command('build <outputPath>')
  .description('build the dependencies of the project in the current working directory and write them to <outputPath>.')
  .action(function(outputPath, options){
    options.outputPath = outputPath;
    processCommand('build', options);
  });

program.parse(process.argv);
if (!program.args.length) program.help();