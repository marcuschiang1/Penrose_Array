/* jshint globalstrict: true, strict: false, undef: true, unused: true,
          trailing: true, browser: true, smarttabs:true */
/* global require, console, module */

var async = require('async'),
    tsort = require('tsort'),
    q = require('q'),
    mkdirp = require('mkdirp'),
    extend = require('util')._extend,
    fs = require('fs'),
    util = require('./util');

require('colors');

var DEPENDENCIES_DIR = 'src/dependencies';

var Dependencies = function () {
  var topLevelProject,
      graph,
      depsMap,
      deps;

  var add = function(project) {
    depsMap[project.artifactFilename] = project;

    if (project.parent) {
      graph.add(project.parent.artifactFilename, project.artifactFilename);
    }
    else {
      graph.add(project.artifactFilename);
    }

    return this;
  };

  var _from = function (project, depth) {
    util.log('Resolving dependencies for ' + project.fullName.bold +
              ' (path: ' + project.path.underline +
              ', parent: ' + (project.parent ? project.parent.fullName : 'none') + ')', depth);

    add(project);

    if (project.dependenciesList.length > 0) {
      util.log(project.fullName + ' depends on: ' +  project.dependenciesList.join(', '), depth);
      depth++;
    }

    var tasks = project.dependenciesList.map(function(project) {
      return _from(project, depth);
    });

    return q.all(tasks)
              .then(function() {
                deps = graph.sort().reverse().map(function(dep) {
                  return depsMap[dep];
                });
              });
  };

  this._from = function (project) {
    topLevelProject = project;
    graph = tsort();
    depsMap = {};
    deps = [];

    return _from(project, 0).then(function() { return this; }.bind(this));
  };

  this.forEach = function(it, context) {
    deps.slice(0, deps.length-1).forEach(it, context);
    return this;
  };

  this.combine = function() {
    var deferred = q.defer();

    async.map(deps.slice(0, deps.length-1), function(dep, cb) {
      dep.getArtifact().then(function(contents) { cb(null, contents); }, cb);
    }, function(err, combinedDependenciesJS) {
      if (err) {
        return deferred.reject(err);
      }

      var combinedJs = combinedDependenciesJS.join('\n\n');
      return deferred.resolve(combinedJs);
    });

    return deferred.promise;
  };

  this.writeToFile = function(file) {
    return this.combine()
              .then(function(combined) {
                return q.nfcall(fs.writeFile, file, combined);
              });
  };

  this.valueOf = function() {
    if (deps.length <= 1) return;

    var _d = graph.sort().reverse(),
        str = [' ' + topLevelProject.fullName];

    for (var i=0; i<_d.length-2; ++i) {
      str.push(' ├── ' + depsMap[_d[i]].fullName);
    }

    str.push(' └── ' + depsMap[_d[i]].fullName);

    return str.join('\n');
  };

  this.toString = this.valueOf.bind(this);

  Object.defineProperty(this, 'length', {
    get: function() {
      return deps.length - 1;
    }
  });
};

Dependencies.from = function(project) {
  var dependencies = new Dependencies();
  return dependencies._from(project);
};

Dependencies.dependencyPathFor = function(path) {
  return path + DEPENDENCIES_DIR + '/';
};

module.exports = Dependencies;